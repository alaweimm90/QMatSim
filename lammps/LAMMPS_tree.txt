ðŸ—Ž ./LAMMPS_tree.txt
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€



ðŸ—Ž ./data/1x10_rectangular.data
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# LAMMPS data file written by OVITO Basic 3.10.6

60 atoms
2 atom types

-2.7508553709e-06 3.1675241273 xlo xhi
9.0577214302e-06 54.8630705214 ylo yhi
0.0 50.0 zlo zhi

Masses

1 95.94  # Mo
2 32.065  # S

Atoms  # atomic

9 1 1.5837606882 10.0582735681 25.0
10 1 1.5837606882 4.5719564491 25.0
19 1 -2.7508553709e-06 7.3151204949 25.0
20 1 -2.7508553709e-06 1.8288033759 25.0
29 2 -2.7508553709e-06 9.1438709227 26.62125
30 2 -2.7508553709e-06 3.6575702626 26.62125
39 2 -2.7508553709e-06 9.1438709227 23.37875
40 2 -2.7508553709e-06 3.6575702626 23.37875
49 2 1.5837606882 6.4007178495 26.62125
50 2 1.5837606882 0.9144171894 26.62125
59 2 1.5837606882 6.4007178495 23.37875
60 2 1.5837606882 0.9144171894 23.37875
7 1 1.5837606882 21.0308858608 25.0
8 1 1.5837606882 15.5445797145 25.0
17 1 3.1675241273 18.2877327876 25.0
18 1 3.1675241273 12.8014266413 25.0
27 2 3.1675241273 20.1164832154 26.62125
28 2 -2.7508553709e-06 14.6301770691 26.62125
37 2 -2.7508553709e-06 20.1164832154 23.37875
38 2 -2.7508553709e-06 14.6301770691 23.37875
47 2 1.5837606882 17.3733301422 26.62125
48 2 1.5837606882 11.8870239959 26.62125
57 2 1.5837606882 17.3733301422 23.37875
58 2 1.5837606882 11.8870239959 23.37875
5 1 1.5837606882 32.0034981536 25.0
6 1 1.5837606882 26.5171920072 25.0
15 1 -2.7508553708e-06 29.2603450804 25.0
16 1 -2.7508553709e-06 23.774038934 25.0
25 2 -2.7508553709e-06 31.0890955081 26.62125
26 2 -2.7508553709e-06 25.6027893618 26.62125
35 2 -2.7508553709e-06 31.0890955081 23.37875
36 2 -2.7508553709e-06 25.6027893618 23.37875
45 2 1.5837606882 28.345942435 26.62125
46 2 1.5837606882 22.8596362886 26.62125
55 2 1.5837606882 28.345942435 23.37875
56 2 1.5837606882 22.8596362886 23.37875
3 1 1.5837606882 42.9761104463 25.0
4 1 1.5837606882 37.4898042999 25.0
13 1 3.1675241273 40.2329573731 25.0
14 1 3.1675241273 34.7466512267 25.0
23 2 -2.7508553709e-06 42.0617078009 26.62125
24 2 -2.7508553709e-06 36.5754016545 26.62125
33 2 -2.7508553709e-06 42.0617078009 23.37875
34 2 3.1675241273 36.5754016545 23.37875
43 2 1.5837606882 39.3185547277 26.62125
44 2 1.5837606882 33.8322485813 26.62125
53 2 1.5837606882 39.3185547277 23.37875
54 2 1.5837606882 33.8322485813 23.37875
1 1 1.5837606882 53.948722739 25.0
2 1 1.5837606882 48.4624165927 25.0
11 1 -2.7508553709e-06 51.2055696658 25.0
12 1 3.1675241273 45.7192635195 25.0
21 2 -2.7508553709e-06 53.0343200936 26.62125
22 2 -2.7508553709e-06 47.5480139472 26.62125
31 2 -2.7508553709e-06 53.0343200936 23.37875
32 2 -2.7508553709e-06 47.5480139472 23.37875
41 2 1.5837606882 50.2911670204 26.62125
42 2 1.5837606882 44.8048608741 26.62125
51 2 1.5837606882 50.2911670204 23.37875
52 2 1.5837606882 44.8048608741 23.37875



ðŸ—Ž ./data/1x1_primitive.data
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# LAMMPS data file: 1x1 MoS2 primitive cell

3 atoms
2 atom types

0.0 3.18 xlo xhi
0.0 5.50 ylo yhi
0.0 40.0 zlo zhi

Masses

1 95.94  # Mo
2 32.065 # S

Atoms  # atomic

1 1 1.59 2.75 20.0       # Mo center
2 2 1.59 2.75 21.6       # S top
3 2 1.59 2.75 18.4       # S bottom



ðŸ—Ž ./data/1x1_rectangular.data
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# LAMMPS data file: 1x1 MoS2 rectangular unit cell

6 atoms
2 atom types

0.0 3.18 xlo xhi
0.0 11.00 ylo yhi
0.0 40.0 zlo zhi

Masses

1 95.94  # Mo
2 32.065 # S

Atoms  # atomic

1 1 1.59 2.75 20.0       # Mo 1
2 1 1.59 8.25 20.0       # Mo 2
3 2 1.59 2.75 21.6       # S 1 top
4 2 1.59 8.25 21.6       # S 2 top
5 2 1.59 2.75 18.4       # S 1 bottom
6 2 1.59 8.25 18.4       # S 2 bottom



ðŸ—Ž ./in/compress_y.in
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
############################################################################
############################################################################
# File: compress.in
# Description: Simulation setup of compression using Liang's model
# Developer: Meshal Alawein, EECS PhD student at UC Berkeley
# Contact: meshal@berkeley.edu
############################################################################
############################################################################

########## GLOBAL VARIABLES ##########
units metal                                                                   # Units setting
dimension 3                                                                   # Simulation dimension
boundary p p f                                                                # Boundary conditions

# Neighbor Settings
neighbor 1 bin                                                              # Neighbor binning for efficiency
neigh_modify delay 5 every 1                                                  # Neighbor list update settings

############################ Initialization ############################
units metal                                                                   # Style of units
dimension 3                                                                   # Dimension of simulation
newton on                                                                     # Newton's 3rd law for pairwise and bonded interactions
boundary p p f                                                                # Boundary conditions
atom_style atomic                                                             # Style of atoms
box tilt large                                                                # Set tilt constraint of simulation box 

############################ System definition ############################
# Read data
read_data 1x10_rectangular.data                                                           # Read data file  
replicate 1 1 1                                                               # Cell replication

group MoGroup type 2                                                          # Define a group (Mo atoms)
group SGroup type 1                                                           # Define a group (S atoms)

#group up id 85
#group down id 115

#fix 10 up setforce 0.0 0.0 0.0
#fix 20 down setforce NULL NULL 0.0

variable dx1 equal 0                                                          # Define dx1 [Ang] 
variable dx2 equal 0                                                          # Define dx2 [Ang] 
change_box all x delta ${dx1} ${dx2}                                           # Change box
variable dy1 equal 0                                                          # Define dy1 [Ang] 
variable dy2 equal 0                                                          # Define dy2 [Ang] 
change_box all y delta ${dy1} ${dy2}                                           # Change box
variable dz1 equal 0                                                          # Define dz1 [Ang] 
variable dz2 equal 0                                                          # Define dz2 [Ang] 
change_box all z delta ${dz1} ${dz2}                                           # Change box

############################ Simulation settings ############################
# Force field coefficients
pair_style rebomos                                                             # Set the formulas LAMMPS uses to compute pairwise interactions 
pair_coeff * * MoS.REBO.set5b M S                                             # Pairwise force field coefficients

# Variables and computation
variable Lx equal lx                                                          # Define Lx [Ang]
variable Ly equal ly                                                          # Define Ly [Ang]
variable Lz equal lz                                                          # Define Lz [Ang]
variable V equal vol                                                          # Define V [Ang]
variable t equal 6.09                                                         # Define t (interatomic spacing) [Ang]

compute myTemp all temp                                                       # Compute temperature for all atoms
compute P all pressure myTemp                                                 # Compute pressure for all atoms
compute EPTotal all pe                                                        # Compute total potential energy
compute EPAtom all pe/atom                                                    # Compute potential energy per atom
compute Satom all stress/atom myTemp                                          # Compute stress for all atoms
compute S all reduce sum c_Satom[*]                                           # Compute total stress

variable Pxx equal "-pxx/10000"                                                # Define Pxx [GPa]
variable Pyy equal "-pyy/10000"                                                # Define Pyy [GPa]
variable Pzz equal "-pzz/10000"                                                # Define Pzz [GPa]
variable Sxx equal "c_S[1]/10000"                                             # Define Sxx [GPa*Ang^3] 
variable Syy equal "c_S[2]/10000"                                             # Define Syy [GPa*Ang^3]
variable Szz equal "c_S[3]/10000"                                             # Define Szz [GPa*Ang^3]
variable Sxy equal "c_S[4]/10000"                                             # Define Sxy [GPa*Ang^3]
variable Sxz equal "c_S[5]/10000"                                             # Define Sxz [GPa*Ang^3]
variable Syz equal "c_S[6]/10000"                                             # Define Syz [GPa*Ang^3]
variable       					Ptheor equal -(c_S[1]+c_S[2]+c_S[3])/(3*$V*10000)                # Define P=-(Sxx+Syy+Szz)/(d*V) [Bar] [NOTE: d=1,2,3; we use d=3 here]	
variable 						force_atom atom sqrt(fx*fx+fy*fy+fz*fz)
variable 						force_atomxy atom sqrt(fx*fx+fy*fy)
variable 						force_atomxz atom sqrt(fx*fx+fz*fz)
variable 						force_atomyz atom sqrt(fy*fy+fz*fz)
compute 						allforce all reduce max v_force_atom
compute 						allforcexy all reduce max v_force_atomxy
compute 						allforcexz all reduce max v_force_atomxz 
compute 						allforceyz all reduce max v_force_atomyz
variable 						Ftot equal "c_allforce"
variable 						Fxy equal "c_allforcexy"
variable 						Fxz equal "c_allforcexz"
variable 						Fyz equal "c_allforceyz"


#displace_atoms up move 0.0 0.0 0.10 units box
#displace_atoms down move 0.0 0.0 -0.20 units box


# Initial Relaxation
fix 3 all box/relax x 0.0 y 0.0                                               # Relax box in x and y directions
dump 1 all atom 1000 compress.dump                                            # Dump configuration every 1000 steps
dump_modify 1 scale no                                                        # Modify dump to not scale coordinates

# Thermodynamic Outputs
variable Nprint equal 100                                                      # Frequency of thermodynamic output
thermo ${Nprint}                                                               # Output thermodynamic info every Nprint-timesteps
thermo_style 					custom &
								step time &
								temp press v_Ptheor pe ke etotal &
								lx ly lz vol & 
								fnorm v_Fxy v_Fxz v_Fyz v_Ftot &
								v_Pxx v_Pyy v_Pzz &
 								v_Sxx v_Syy v_Szz					

thermo_modify lost error flush yes                                             # Modify thermo settings
print "Nstep T (K)   P (GPa)   E_P (eV)   E_K (eV)   E_total (eV)   L_x (Ang)   L_y (Ang)   L_z (Ang)   V (Ang^3)   P_xx (GPa)   P_yy (GPa)   P_zz (GPa)" &
      file data.txt screen no

# Minimization Settings
min_style cg                                                                  # Conjugate gradient minimization
minimize 1.0e-99 1.0e-99 10000000 10000000                                    # Minimization parameters

write_dump all atom initial.dump                                              # Write initial configuration

# Start box compression along a specified direction
unfix 3                                                                       # Remove initial relaxation fix

fix 4 all box/relax x 0.0                                                     # New fix for further relaxation

#unfix 10
#unfix 20

variable a loop 40                                                            # Loop variable for compression cycles
label loop                                                                    # Loop label


change_box all y delta 0.2743154 -0.2743154 remap                             # Change box dimensions
#change_box all y delta 0.5486308 -0.5486308 remap                             # Change box dimensions
#change_box all y delta 0.8229462 -0.8229462 remap                             # Change box dimensions

displace_atoms all random 0.01 0.01 0.01 32184769                             # Randomly displace atoms to avoid singularities

minimize 1.0e-99 1.0e-99 10000000 10000000                                    # Minimization parameters


write_dump all atom strain-$a.dump                                             # Write configuration at each step
print "$(step)  $(temp:%.3f) $(press/10000:%.3f)   $(pe:%.3f)   $(ke:%.3f)     $(etotal:%.3f)       $(v_Lx:%.4f)     $(v_Ly:%.3f)      $(v_Lz:%.3f)      $(v_V:%.3f)    $(v_Pxx:%.3f)       $(v_Pyy:%.3f)       $(v_Pzz:%.3f)" append data.txt screen no
next a                                                                        # Increment loop variable

jump compress-y.in loop                                                            # Jump to start of loop

# Clean-up and closing statements
print "ALL SIMULATIONS COMPLETED!"                                            # Completion message



ðŸ—Ž ./in/deformation.in
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
############################################################################
############################################################################
# File: deformation.MoS2
# Description: Deformation at 0 K
# Developer: Meshal Alawein, EECS PhD student at UC Berkeley
# Contact: meshal@berkeley.edu
############################################################################
############################################################################

########## GLOBAL VARIABLES ##########

# Simulation parameters
variable 						eTol equal 1e-18 												 # Define e_tol
variable 						fTol equal 1e-18 												 # Define f_tol
variable 						maxIter equal 20000 											 # Define max_iter
variable 						maxEval equal 20000 											 # Define max_eval

# Deformation parameters (alpha > 1, tensile strain; alpha < 1, compressive strain)
variable 						j loop 1000000 												     # Define j
variable 						alpha equal 1.001										         # Define alpha [NOTE: strain = (alpha-1/1)*100%, e.g. alpha = L/L0 = 1.0001 -> strain = 0.0001 = 0.01% per j-step, i.e. if j = 1000 -> strain = = 0.1 = 100%] 

############################ Initialization ############################
units 							metal 				 											 # Style of units (lj, real, metal, si, cgs, electron, micro, nano) {default = lj}
dimension 						3 					 											 # Dimension of simulation (2, 3) {default = 3}
newton 							on 				     											 # Newton's 3rd law for pairwise and bonded interactions {default = on}
boundary 						p p p 				 											 # Style of boundaries (p, f, s, m) {default = p p p}
atom_style 						atomic 				 											 # Style of atoms (atomic, bond, full, ...) {default = atomic}
box 							tilt large 														 # Set tilt constraint of simulation box 


############################ System definition ############################
# Read data
read_data  		                1x10_rectangular.lmp 					     # Read data file  
replicate 						1 1 1															 # Cell replication

group 							MoGroup type 2 													 # Define a group (Mo atoms)
group 							SGroup type 1 													 # Define a group (S atoms)

variable 						dx1 equal 0												 	     # Define dx1 [Ang] 
variable 						dx2 equal 0												 	 	 # Define dx2 [Ang] 
change_box 						all x delta ${dx1} ${dx2} 								     	 # Change box
variable 						dy1 equal 0												 	     # Define dy1 [Ang] 
variable 						dy2 equal 0												 	     # Define dy2 [Ang] 
change_box 						all y delta ${dy1} ${dy2} 								 		 # Change box
variable 						dz1 equal 0												 	 	 # Define dz1 [Ang] 
variable 						dz2 equal 0												 	     # Define dz2 [Ang] 
change_box 						all z delta ${dz1} ${dz2} 								 		 # Change box

############################ Simulation settings ############################
# Force field coefficients
pair_style						rebomos															 # Set the formulas LAMMPS uses to compute pairwise interactions 
pair_coeff 						* * MoS.REBO.set5b M S 											 # Pairwise force field coefficients


# Variables and computation
variable   						Lx equal lx 										 			 # Define Lx [Ang]
variable   						Ly equal ly                       					 			 # Define Ly [Ang]
variable   						Lz equal lz                         				 			 # Define Lz [Ang]
variable   						V equal vol                         				 			 # Define V [Ang]
variable 						t equal 6.09 										 			 # Define t (interatomic spacing) [Ang] [NOTE: defined as Mo-Mo vertical distance ~ 0.615 nm = 6.15 Ang]
compute 						T all temp    										 			 # Compute T [K]
compute 						P all pressure T    								 			 # Compute P [Bar]
compute 						EPTotal all pe    			    					 			 # Compute E_P [eV]	
compute 						EPAtom all pe/atom    								 			 # Compute E_{P,atom} [eV/atom]	
compute 						Satom all stress/atom T						 			         # Compute S_atom [Bar*Ang^3/atom] [note: stress*volume formulation] [NOTE: no Lennard-Jones tail corrections] 
compute    						S all reduce sum c_Satom[*]       				 			     # Compute S [Bar*Ang^3] [NOTE: by summing the components of S_atom for all atoms to a global total S] 
variable 						Pxx equal "pxx/10000" 										     # Define Pxx [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable 						Pyy equal "pyy/10000" 											 # Define Pyy [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable 						Pzz equal "pzz/10000" 											 # Define Pzz [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable       					Sxx equal "c_S[1]/10000"									 	 # Define Sxx [GPa*Ang^3] 
variable       					Syy equal "c_S[2]/10000" 									 	 # Define Syy [GPa*Ang^3]
variable       					Szz equal "c_S[3]/10000" 									 	 # Define Szz [GPa*Ang^3]
variable       					Sxy equal "c_S[4]/10000"									 	 # Define Sxy [GPa*Ang^3]
variable       					Sxz equal "c_S[5]/10000" 									 	 # Define Sxz [GPa*Ang^3]
variable       					Syz equal "c_S[6]/10000" 									 	 # Define Syz [GPa*Ang^3]
variable       					Ptheor equal -(c_S[1]+c_S[2]+c_S[3])/(3*$V*10000)                # Define P=-(Sxx+Syy+Szz)/(d*V) [Bar] [NOTE: d=1,2,3; we use d=3 here]	
variable 						force_atom atom sqrt(fx*fx+fy*fy+fz*fz)
variable 						force_atomxy atom sqrt(fx*fx+fy*fy)
variable 						force_atomxz atom sqrt(fx*fx+fz*fz)
variable 						force_atomyz atom sqrt(fy*fy+fz*fz)
compute 						allforce all reduce max v_force_atom
compute 						allforcexy all reduce max v_force_atomxy
compute 						allforcexz all reduce max v_force_atomxz 
compute 						allforceyz all reduce max v_force_atomyz
variable 						Ftot equal "c_allforce"
variable 						Fxy equal "c_allforcexy"
variable 						Fxz equal "c_allforcexz"
variable 						Fyz equal "c_allforceyz"

# Simulation parameters
min_style 						cg 																# Minimization algorithm
min_modify  					dmax 0.1 line quadratic norm two  								# Modify the minimization algorithm options [NOTE: forcezero search can be more efficient than quadratic for some systems. backtrack always find a minimum, but individual atomic forces may be large than desired]
neighbor 						2.0 bin 														# Skin distance of pairwise atoms [Ang] [NOTE: all atom paris within neighbor cutoff distance = force cutoff + skin distance, are stored in the pairwise neighbor lists]
neigh_modify 					every 1 delay 0 check yes 										# Modify the neighbor lists building algorithm 

# Output options
variable 						Nprint equal 100 												# Define Nprint
thermo 							${Nprint} 														# Output thermodynamic info every Nprint-timesteps {default = 0}
thermo_style 					custom &
								step time &
								temp press v_Ptheor pe ke etotal &
								lx ly lz vol & 
								fnorm v_Fxy v_Fxz v_Fyz v_Ftot &
								v_Pxx v_Pyy v_Pzz &
 								v_Sxx v_Syy v_Szz					


variable 						Ndump equal 10 													# Define Ndump
dump 							dumpInitial all custom ${Ndump} A1-dump_Initialcoords.dump  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 
minimize 						1 1 0 0
undump  						dumpInitial 										    		# Turn off a previously defined dump (i.e., close the file associated with the dump)


dump 							dumpAll all custom ${Ndump} A3-dump_Allcoords.dump  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 
dump_modify 					dumpAll time yes 												# Modify the parameters of the dump command


#======== ENERGY MINIMIZATION ========#
print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
print "[                STARTING: CG minimization (MINIMIZATION [PRE-DEFORMATION])               ]"
minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 						# Perform an energy minimization of the system: etol ftol maxiter maxeval
print "[                COMPLETED: CG minimization (MINIMIZATION [PRE-DEFORMATION])                ]"
print "---------------------------------------------------------------------------------------"


#===============================================================================================================================================#
#===============================================================================================================================================#
#================================================================== Deformation ================================================================#
#===============================================================================================================================================#
#===============================================================================================================================================#
# COMPRESS THE SIMULATION BOX BY A STRAIN=|alpha-1| AND MINIMIZE FOR EACH j=1,2,3... 
label 							deformation

variable 						Pxx equal "-pxx/10000" 											# Define Pxx [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable 						Pyy equal "-pyy/10000" 											# Define Pyy [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable 						Pzz equal "-pzz/10000" 											# Define Pzz [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable 						Sext equal v_Pyy 												# Define Sext [GPa]

variable 						Ltemp equal "ly" 												# Define Ltemp [Ang]
variable 						L0 equal ${Ltemp} 												# Define L0 [Ang]	
variable 						Scalc equal "(ly - v_L0)/v_L0"                     				# Define S_calc = L-L_0/L_0
variable 						Sext equal "v_Pyy"                     							# Define S_ext [GPa]

variable 						S equal 0.005 													# Define S 
variable 						dL equal -${S}*${L0}
print 							"$(v_dL)"
print 							"$(v_Scalc:%.3f) $(v_Sext:%.3f)" &
								file D1-strainDeformationData.txt screen no

print 							"Nstep T (K)   P (GPa)   E_P (eV)   E_K (eV)   E_total (eV)   L_x (Ang)   L_y (Ang)   L_z (Ang)   V (Ang^3)   S (%)   P_xx (GPa)   P_yy (GPa)   P_zz (GPa)" &
								file D2-deformationData.txt screen no

print 							"$(step)  $(temp:%.3f) $(press/10000:%.3f)   $(pe:%.3f)   $(ke:%.3f)     $(etotal:%.3f)       $(v_Lx:%.4f)     $(v_Ly:%.3f)      $(v_Lz:%.3f)      $(v_V:%.3f)  $(v_Scalc*100:%.3f)   $(v_Pxx:%.3f)       $(v_Pyy:%.3f)       $(v_Pzz:%.3f)" &
								append D2-deformationData.txt screen no

# Output options
variable 						Nprint equal 100 												# Define Nprint
thermo 							${Nprint} 														# Output thermodynamic info every Nprint-timesteps {default = 0}
thermo_style 					custom step temp &
								press pe ke etotal &
								lx ly lz vol & 
								fnorm v_Fxy v_Fxz v_Fyz v_Ftot &
								v_Pxx v_Pyy v_Pzz &
 								v_Sxx v_Syy v_Szz &
								v_Scalc v_Sext

variable 						Ndump equal 10 													# Define Ndump
dump 							dumpCoords all custom ${Ndump} C3-dump_coordsDeformation.dump  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 



# Strain and minimize using a loop
label 							deformationLoop

	change_box				    all y scale ${alpha} remap units box     						# Change box 
# Minimize after scaling along y-axis
	minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 							# Perform an energy minimization of the system: etol ftol maxiter maxeval

# Allow all coordinates to change
	change_box all remap

# Minimize after fixing box boundaries and allowing all coordinates to change
	minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 							# Perform an energy minimization of the system: etol ftol maxiter maxeval
    # change_box				 all y delta 0 0.5 remap units box     						# Change box

	#======== ENERGY MINIMIZATION ========#
	print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	print "[                STARTING: CG minimization (MINIMIZATION #3 [DEFORMATION])               ]"
	minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 						# Perform an energy minimization of the system: etol ftol maxiter maxeval
	print "[                COMPLETED: CG minimization (MINIMIZATION #3 [DEFORMATION])                ]"
	print "---------------------------------------------------------------------------------------"

	variable 					Scalc equal "(ly - v_L0)/v_L0"                     				# Define S_calc = L-L_0/L_0

	print 							"$(v_Scalc:%.3f) $(v_Sext:%.3f)" &
									append D1-strainDeformationData.txt screen no

	print 							"$(step)  $(temp:%.3f) $(press/10000:%.3f)   $(pe:%.3f)   $(ke:%.3f)     $(etotal:%.3f)       $(v_Lx:%.4f)     $(v_Ly:%.3f)      $(v_Lz:%.3f)      $(v_V:%.3f)  $(v_Scalc*100:%.3f)   $(v_Pxx:%.3f)       $(v_Pyy:%.3f)       $(v_Pzz:%.3f)" &
									append D2-deformationData.txt screen no

	next 							j
	jump 							SELF deformationLoop

label 							deformationLoopBreak 

undump  						dumpCoords 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)



undump  						dumpAll 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

dump 							dumpFinal all custom 1 A2-dump_Finalcoords.dump  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 
minimize 						1 1 0 0

undump  						dumpFinal 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

print "ALL SIMULATIONS COMPLETED!"



ðŸ—Ž ./in/minimization.in
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
############################################################################
############################################################################
# File: minimization.MoS2
# Description: Energy minimization at 0 K
# Developer: Meshal Alawein, EECS PhD student at UC Berkeley
# Contact: meshal@berkeley.edu
############################################################################
############################################################################

variable 						case equal 1 												 	# Define case [CASE 1: variable-cell minimization; CASE 2: fixed-cell minimization]

if "${case} == 1" then "variable caseString string Variable-cell"

if "${case} == 2" then "variable caseString string Fixed-cell"

########## GLOBAL VARIABLES ##########

# Simulation parameters
variable 						eTol equal 1e-15 												 # Define e_tol
variable 						fTol equal 1e-15 												 # Define f_tol
variable 						maxIter equal 20000 											 # Define max_iter
variable 						maxEval equal 20000 											 # Define max_eval

# Case 1 (variable-cell relaxation)
variable 						k loop 10000 													 # Define k
variable 						VmaxChange equal 0.0001 										 # Define V_{max,change} [Ang^3] [NOTE: volume change is VmaxChange*100%, e.g. VmaxChange = 0.001 -> 0.1% change in one iteration]

# Part 2 (fixed-cell relaxation)
# No external parameters to be defined


############################ Initialization ############################
units                                                   metal                                                                                                                    # Style of units (lj, real, metal, si, cgs, electron, micro, nano) {default = lj}
dimension                                               3                                                                                                                                # Dimension of simulation (2, 3) {default = 3}
newton                                                  on                                                                                                                       # Newton's 3rd law for pairwise and bonded interactions {default = on}
boundary                                                p p p                                                                                                                    # Style of boundaries (p, f, s, m) {default = p p p}
atom_style                                              atomic                                                                                                                   # Style of atoms (atomic, bond, full, ...) {default = atomic}
box                                                     tilt large                                                                                                               # Set tilt constraint of simulation box


############################ System definition ############################
# Read data
read_data                               1x10_rectangular.lmp                                          # Read data file
replicate                                               1 1 1                                                                                                                    # Cell replication

group                                                   MoGroup type 2                                                                                                   # Define a group (Mo atoms)
group                                                   SGroup type 1                                                                                                    # Define a group (S atoms)

variable                                                dx1 equal 0                                                                                                          # Define dx1 [Ang]
variable                                                dx2 equal 0                                                                                                              # Define dx2 [Ang]
change_box                                              all x delta ${dx1} ${dx2}                                                                        # Change box
variable                                                dy1 equal 0                                                                                                          # Define dy1 [Ang]
variable                                                dy2 equal 0                                                                                                          # Define dy2 [Ang]
change_box                                              all y delta ${dy1} ${dy2}                                                                                # Change box
variable                                                dz1 equal 0                                                                                                              # Define dz1 [Ang]
variable                                                dz2 equal 0                                                                                                          # Define dz2 [Ang]
change_box                                              all z delta ${dz1} ${dz2}                                                                                # Change box

############################ Simulation settings ############################
# Force field coefficients
pair_style                                              rebomos                                                                                                                  # Set the formulas LAMMPS uses to compute pairwise interactions
pair_coeff                                              * * MoS.REBO.set5b M S                                                                                   # Pairwise force field coefficients


# Variables and computation
variable                                                Lx equal lx                                                                                                      # Define Lx [Ang]
variable                                                Ly equal ly                                                                                      # Define Ly [Ang]
variable                                                Lz equal lz                                                                              # Define Lz [Ang]
variable                                                V equal vol                                                                              # Define V [Ang]
variable                                                t equal 6.09                                                                                                     # Define t (interatomic spacing) [Ang] [NOTE: defined as Mo-Mo vertical distance ~ 0.615 nm = 6.15 Ang]
compute                                                 T all temp                                                                                                       # Compute T [K]
compute                                                 P all pressure T                                                                                         # Compute P [Bar]
compute                                                 EPTotal all pe                                                                                           # Compute E_P [eV]
compute                                                 EPAtom all pe/atom                                                                                       # Compute E_{P,atom} [eV/atom]
compute                                                 Satom all stress/atom T                                                                          # Compute S_atom [Bar*Ang^3/atom] [note: stress*volume formulation] [NOTE: no Lennard-Jones tail corrections]
compute                                                 S all reduce sum c_Satom[*]                                                                  # Compute S [Bar*Ang^3] [NOTE: by summing the components of S_atom for all atoms to a global total S]
variable                                                Pxx equal "pxx/10000"                                                                                # Define Pxx [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable                                                Pyy equal "pyy/10000"                                                                                    # Define Pyy [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable                                                Pzz equal "pzz/10000"                                                                                    # Define Pzz [GPa] [NOTE: 1 Bar = 100 kPa = 1/10000 GPa]
variable                                        Sxx equal "c_S[1]/10000"                                                                                 # Define Sxx [GPa*Ang^3]
variable                                        Syy equal "c_S[2]/10000"                                                                                 # Define Syy [GPa*Ang^3]
variable                                        Szz equal "c_S[3]/10000"                                                                                 # Define Szz [GPa*Ang^3]
variable                                        Sxy equal "c_S[4]/10000"                                                                                 # Define Sxy [GPa*Ang^3]
variable                                        Sxz equal "c_S[5]/10000"                                                                                 # Define Sxz [GPa*Ang^3]
variable                                        Syz equal "c_S[6]/10000"                                                                                 # Define Syz [GPa*Ang^3]
variable                                        Ptheor equal -(c_S[1]+c_S[2]+c_S[3])/(3*$V*10000)                # Define P=-(Sxx+Syy+Szz)/(d*V) [Bar] [NOTE: d=1,2,3; we use d=3 here]
variable                                                force_atom atom sqrt(fx*fx+fy*fy+fz*fz)
variable                                                force_atomxy atom sqrt(fx*fx+fy*fy)
variable                                                force_atomxz atom sqrt(fx*fx+fz*fz)
variable                                                force_atomyz atom sqrt(fy*fy+fz*fz)
compute                                                 allforce all reduce max v_force_atom
compute                                                 allforcexy all reduce max v_force_atomxy
compute                                                 allforcexz all reduce max v_force_atomxz
compute                                                 allforceyz all reduce max v_force_atomyz
variable                                                Ftot equal "c_allforce"
variable                                                Fxy equal "c_allforcexy"
variable                                                Fxz equal "c_allforcexz"
variable                                                Fyz equal "c_allforceyz"

# Simulation parameters
min_style                                               cg                                                                                                                              # Minimization algorithm
min_modify                                      dmax 0.1 line quadratic norm two                                                                # Modify the minimization algorithm options [NOTE: forcezero search can be more efficient than quadratic for some systems. backtrack always find a minimum, but individual atomic forces may be large than desired]
neighbor                                                2.0 bin                                                                                                                 # Skin distance of pairwise atoms [Ang] [NOTE: all atom paris within neighbor cutoff distance = force cutoff + skin distance, are stored in the pairwise neighbor lists]
neigh_modify                                    every 1 delay 0 check yes                                                                               # Modify the neighbor lists building algorithm

# Output options
variable                                                Nprint equal 100                                                                                                # Define Nprint
thermo                                                  ${Nprint}                                                                                                               # Output thermodynamic info every Nprint-timesteps {default = 0}
thermo_style                                    custom &
                                                                step time &
                                                                temp press v_Ptheor pe ke etotal &
                                                                lx ly lz vol &
                                                                fnorm v_Fxy v_Fxz v_Fyz v_Ftot &
                                                                v_Pxx v_Pyy v_Pzz &
                                                                v_Sxx v_Syy v_Szz


variable                                                Ndump equal 10                                                                                                  # Define Ndump
dump                                                    dumpInitial all custom ${Ndump} A1-dump_Initialcoords.dump  &
                                                                x y z type                                                                                                              # Dump a snapshot of per atom quantities every Ndump-timesteps
minimize                                                1 1 0 0
undump                                                  dumpInitial                                                                                             # Turn off a previously defined dump (i.e., close the file associated with the dump)


dump                                                    dumpAll all custom ${Ndump} A3-dump_Allcoords.dump  &
                                                                x y z type                                                                                                              # Dump a snapshot of per atom quantities every Ndump-timesteps
dump_modify                                     dumpAll time yes                                                                                                # Modify the parameters of the dump command

############################ Run a simulation ############################

if "${case} != 1" then "jump SELF notCase1"

#===============================================================================================================================================#
#===============================================================================================================================================#
#====================================================== CASE #1: Variable-cell minimization ====================================================#
#===============================================================================================================================================#
#===============================================================================================================================================#
label 						    variableCell

variable 						Ndump equal 100 													# Define Ndump
dump 							dumpCoords all custom ${Ndump} B0-dump_coordsVariableCellMinimization.txt  &
								x y z type 		  													# Dump a snapshot of per atom quantities every Ndump-timesteps 

#======== ENERGY MINIMIZATION ========#
variable 						PxTarget equal 0.0 													# Define P_{x,target} [Bar]
variable 						PyTarget equal 0.0  											 	# Define P_{y,target} [Bar]
variable 						PzTarget equal 0.0  											 	# Define P_{z,target} [Bar]
variable 						PxyTarget equal 0.0 											    # Define P_{xy,target} [Bar] [NOTE: only for triclinic box]
variable 						PxzTarget equal 0.0  											 	# Define P_{xz,target} [Bar] [NOTE: only for triclinic box]
variable 						PyzTarget equal 0.0  											 	# Define P_{yz,target} [Bar] [NOTE: only for triclinic box]
variable 						PisoTarget equal 0.0 												# Define P_{iso,target} [Bar]
variable 						PanisoTarget equal 0.0 												# Define P_{aniso,target} [Bar]
variable 						PtriTarget equal 0.0 												# Define P_{tri,target} [Bar]

print 							"Nstep T (K)   P (GPa)   E_P (eV)   E_K (eV)   E_total (eV)   L_x (Ang)   L_y (Ang)   L_z (Ang)   V (Ang^3)   P_xx (GPa)   P_yy (GPa)   P_zz (GPa)" &
								file B1-variableCellMinimizationData.txt screen no

# Box relaxation + minimization loop
label 							variableCellLoop

        # Apply a small perturbation to the structure
        #displace_atoms  all random 0.01 0.01 0.01 12345

	fix 	 					relaxBox all box/relax &
	                            y 0 &
								vmax ${VmaxChange}			 								        # Relax the box during energy minimization while keeping atomic positions fixed

	print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	print "[                STARTING: CG minimization (MINIMIZATION [BOX-RELAXATION]               ]"
	minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 							# Perform an energy minimization of the system: etol ftol maxiter maxeval
	print "[                COMPLETED: CG minimization (MINIMIZATION [BOX RELAXATION])                ]"
	print "---------------------------------------------------------------------------------------"

	unfix    					relaxBox 	 														# Turn off a fix			

	print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	print "[                STARTING: CG minimization (MINIMIZATION [MINIMIZATION])               ]"
	minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 							# Perform an energy minimization of the system: etol ftol maxiter maxeval
	print "[                COMPLETED: CG minimization (MINIMIZATION [MINIMIZATION])                ]"
	print "---------------------------------------------------------------------------------------"

	print 						"$(step) $(temp:%.3f) $(press/10000:%.3f)   $(pe:%.3f)   $(ke:%.3f)     $(etotal:%.3f)       $(v_Lx:%.4f)     $(v_Ly:%.3f)      $(v_Lz:%.3f)      $(v_V:%.3f)  $(v_Pxx:%.3f)       $(v_Pyy:%.3f)       $(v_Pzz:%.3f)" &
								append B1-variableCellMinimizationData.txt screen no

	next 						k
	jump 						SELF variableCellLoop
label 							variableCellLoopBreak 

undump  						dumpCoords 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

label 							notCase1





if "${case} != 2" then "jump SELF notCase2"

#===============================================================================================================================================#
#===============================================================================================================================================#
#====================================================== CASE #2: Fixed-cell minimization =======================================================#
#===============================================================================================================================================#
#===============================================================================================================================================#
label 						    fixedCell

variable 						Ndump equal 10 														# Define Ndump
dump 							dumpCoords all custom ${Ndump} B0-dump_coordsFixedCellMinimization.txt  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 

print 							"Nstep T (K)   P (GPa)   E_P (eV)   E_K (eV)   E_total (eV)   L_x (Ang)   L_y (Ang)   L_z (Ang)   V (Ang^3)   P_xx (GPa)   P_yy (GPa)   P_zz (GPa)" &
								file B3-fixedCellMinimizationData.txt screen no

#======== ENERGY MINIMIZATION ========#
print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
print "[                STARTING: CG minimization (MINIMIZATION)               ]"
minimize 						${eTol} ${fTol} ${maxIter} ${maxEval} 						# Perform an energy minimization of the system: etol ftol maxiter maxeval
print "[                COMPLETED: CG minimization (MINIMIZATION)                ]"
print "---------------------------------------------------------------------------------------"

print 							"$(step) $(temp:%.3f) $(press/10000:%.3f)   $(pe:%.3f)   $(ke:%.3f)     $(etotal:%.3f)       $(v_Lx:%.4f)     $(v_Ly:%.3f)      $(v_Lz:%.3f)      $(v_V:%.3f)  $(v_Pxx:%.3f)       $(v_Pyy:%.3f)       $(v_Pzz:%.3f)" &
								append B3-fixedCellMinimizationData.txt screen no

undump  						dumpCoords 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

label 						    notCase2





undump  						dumpAll 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

dump 							dumpFinal all custom 1 A2-dump_Finalcoords.txt  &
								x y z type 		  												# Dump a snapshot of per atom quantities every Ndump-timesteps 
minimize 						1 1 0 0
undump  						dumpFinal 										    			# Turn off a previously defined dump (i.e., close the file associated with the dump)

print "ALL SIMULATIONS COMPLETED!"



ðŸ—Ž ./in/relax.in
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
############################### Initialization ###############################
units metal                                                                   # Units setting
dimension 3                                                                   # Simulation dimension
boundary p p f                                                                # Periodic in x and y, fixed in z
atom_style atomic                                                             # Style of atoms

# Neighbor Settings
neighbor 1.0 bin                                                              # Neighbor binning for efficiency
neigh_modify delay 5 every 1                                                  # Neighbor list update settings

############################ System definition ############################
read_data 1x10_rectangular.data                                                           # Read data file

# Group Definitions
group MoGroup type 2                                                          # Define a group (Mo atoms)
group SGroup type 1                                                           # Define a group (S atoms)

############################ Force field settings ############################
pair_style rebomos                                                             # Set the formulas LAMMPS uses to compute pairwise interactions
pair_coeff * * MoS.REBO.set5b M S                                             # Pairwise force field coefficients

######################### Fixed-cell Atomic Relaxation #########################
# This step relaxes atomic positions while keeping the box size fixed
minimize 1.0e-6 1.0e-8 10000 10000                                            # Conjugate gradient minimization
write_dump all atom relaxed_fixed_cell.dump                                    # Save the relaxed structure

######################## Variable-cell Relaxation ########################
# Now, allow x and y lattice vectors to relax while keeping z-direction fixed.
fix 3 all box/relax x 0.0 y 0.0                                                # Relax x and y, keep z fixed
minimize 1.0e-6 1.0e-8 10000 10000                                            # Minimize after allowing box relaxation
write_dump all atom relaxed_variable_cell.dump                                 # Save the relaxed variable-cell structure

unfix 3                                                                       # Remove the variable-cell fix

######################### Final Fixed-cell Relaxation #########################
# Final relaxation of atomic coordinates with a fixed box size (x, y, z are fixed)
minimize 1.0e-6 1.0e-8 10000 10000                                            # Final minimization
write_dump all atom final_relaxed_fixed_cell.dump                              # Save the final structure

######################### Thermodynamic Outputs #########################
variable Nprint equal 100                                                      # Frequency of thermodynamic output
thermo ${Nprint}                                                               # Output thermodynamic info every Nprint steps
thermo_style custom step temp press pe ke etotal lx ly lz vol fnorm            # Output thermodynamic info
thermo_modify lost error flush yes                                             # Modify thermo settings

print "Simulation Complete"                                                    # Completion message



ðŸ—Ž ./potentials/MoS.REBO.set5b
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# MS-S REBO Brenner/Sinnot Potential 
# need to cite the appropriate papers here

3.50                rcmin_MM
2.75                rcmin_MS
2.30                rcmin_SS
3.80                rcmax_MM
3.05                rcmax_MS
3.00                rcmax_SS
3.419129390005910   Q_MM
1.505537839153790   Q_MS
0.254959104053671   Q_SS
1.07500712999340    alpha_MM
1.19267902218820    alpha_MS
1.10775022439715    alpha_SS
179.008013654688    A_MM
575.509677721866    A_MS
1228.43233679426    A_SS
706.247903589221    BIJc_MM1
1344.46820036159    BIJc_MS1
1498.64815404145    BIJc_SS1
1.16100322369589    Beta_MM1
1.26973752204290    Beta_MS1
1.12673623610320    Beta_SS1
0.1326842550663270  M_b0
-0.007642788338017  M_b1
0.0341395775059370  M_b2
0.2523050971380870  M_b3
0.1227287372225670  M_b4
-0.361387798398897  M_b5
-0.282577591351457  M_b6
0.120194301035280   M_bg0
0.045238287358190   M_bg1
0.067922807244030   M_bg2
-0.03672511378682   M_bg3
0.107516477513860   M_bg4
0.004964711984940   M_bg5
-0.12997598358652   M_bg6
0.006848761596750   S_b0
-0.02389964401024   S_b1
0.137457353311170   S_b2
0.033016467497740   S_b3
-0.31064291544850   S_b4
-0.08550273135791   S_b5
0.149252790306880   S_b6
-0.2850852	    S_bg0
1.67102480	    S_bg1
-3.5678516	    S_bg2
3.45054990	    S_bg3
-1.2186289	    S_bg4
0.0		    S_bg5
0.0		    S_bg6
0.138040769883614   M_a0
0.803625443023934   M_a1
0.292412960851064   M_a2
0.640588078946224   M_a3
0.062978539843324   S_a0
2.478617619878250   S_a1
0.036666243238154   S_a2
2.386431372486710   S_a3
0.00058595          epsilon_MM
0.01386             epsilon_SS
4.200               sigma_MM 
3.130               sigma_SS



